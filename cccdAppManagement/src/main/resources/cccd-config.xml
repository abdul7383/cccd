<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:oxm="http://www.springframework.org/schema/oxm"
		xmlns:util="http://www.springframework.org/schema/util"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:sec="http://www.springframework.org/schema/security"
		xmlns:rabbit="http://www.springframework.org/schema/rabbit"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
							http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
							http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
							http://www.springframework.org/schema/oxm
							http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd
							http://www.springframework.org/schema/util
  							http://www.springframework.org/schema/util/spring-util-3.1.xsd
  							http://www.springframework.org/schema/security
  							http://www.springframework.org/schema/security/spring-security-3.1.xsd
  							http://www.springframework.org/schema/rabbit
  							http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd">


	<!--
		 Enables automatic mapping of fund objects to and from JSON
	-->
	<mvc:annotation-driven/>

	<!--
		 Setup spring to pull in @Controller, @RequestMapping, etc Configuration scans specified packages
		 for classes configured as Spring managed beans and automatically sets up objects annotated with
		 @Controller, @Service etc.
	-->
    <context:component-scan base-package="de.fhg.fokus.ngni.cccd.rest" />
	<context:component-scan base-package="de.fhg.fokus.ngni.cccd.services" />
	
	<sec:http create-session="stateless">
   		<sec:intercept-url pattern="/app/**" access="ROLE_USER" />
   		<sec:intercept-url pattern="/users/**" access="ROLE_ADMIN" />
   		<sec:http-basic />
	</sec:http>
	
	<bean id="customUserDetailsService" class="de.fhg.fokus.ngni.cccd.services.CustomUserDetailsService" />
	
	<bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<property name="userPropertyToUse" value="username"/>
	</bean>

	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />

	<sec:authentication-manager  alias="authenticationManager" erase-credentials="false">
		<sec:authentication-provider user-service-ref="customUserDetailsService">
	 		<sec:password-encoder ref="passwordEncoder">
	 			<sec:salt-source ref="saltSource" />
	 		</sec:password-encoder>
	 	</sec:authentication-provider>
	 </sec:authentication-manager>
	
	<!--sec:authentication-manager alias="authenticationManager" erase-credentials="false">
   		<sec:authentication-provider>
      		<sec:user-service id="userService">
         		<sec:user name="abdul" password="abdul" authorities="ROLE_ADMIN" />
         		<sec:user name="test1" password="test1" authorities="ROLE_ADMIN" />
         		<sec:user name="cccd" password="cccd" authorities="ROLE_ADMIN" />
         		<sec:user name="abdul12" password="abdul21" authorities="ROLE_ADMIN" />
         		<sec:user name="abdul13" password="abdul31" authorities="ROLE_ADMIN" />
         		<sec:user name="user" password="user" authorities="ROLE_USER" />
      		</sec:user-service>
   		</sec:authentication-provider>
	</sec:authentication-manager-->
	
	<!--
		 TODO
	-->
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />

	<!--
		 Configures view for returning JSON to the client
	-->
	<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
		<property name="contentType" value="application/json"/>
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>

	<!--
		 TODO
	-->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<util:list id="beanList">
				<ref bean="jsonMessageConverter"/>
			</util:list>
		</property>
	</bean>

	<!--
		 Converts JSON to POJO and vice versa
	-->
	<bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>

	<!--  Abdul -->
    <bean id="mongoDb" class="com.mongodb.Mongo">
        <constructor-arg index="0">
            <list value-type="com.mongodb.ServerAddress">
                <bean class="com.mongodb.ServerAddress">
                    <constructor-arg index="0" value="10.0.0.73"/>
                    <constructor-arg index="1" value="27017"/>
                </bean>
                <!--bean class="com.mongodb.ServerAddress">
                    <constructor-arg index="0" value="localhost"/>
                    <constructor-arg index="1" value="27018"/>
                </bean>
                <bean class="com.mongodb.ServerAddress">
                    <constructor-arg index="0" value="localhost"/>
                    <constructor-arg index="1" value="27019"/>
                </bean-->
            </list>
        </constructor-arg>
    </bean>

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
 		<constructor-arg ref="mongoDb" />
 		<constructor-arg name="databaseName" value="users"/>
 	</bean>	

	<bean id="debugResponse" class="java.lang.Boolean">
		<constructor-arg index="0" value="true"/>
	</bean>
	
	<bean id="esClient" class="org.elasticsearch.client.transport.TransportClient" />

	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject"><ref local="esClient"/></property>
		<property name="targetMethod"><value>addTransportAddresses</value></property>
		<property name="arguments"> 
			<list value-type="org.elasticsearch.common.transport.InetSocketTransportAddress">
				<bean class="org.elasticsearch.common.transport.InetSocketTransportAddress">
					<constructor-arg index="0" value="10.0.0.186"/>
					<constructor-arg index="1" value="9300"/>
				</bean>
				<!-- bean class="org.elasticsearch.common.transport.InetSocketTransportAddress">
					<constructor-arg index="0" value="10.0.0.187"/>
					<constructor-arg index="1" value="9300"/>
				</bean>
				<bean class="org.elasticsearch.common.transport.InetSocketTransportAddress">
					<constructor-arg index="0" value="10.0.0.188"/>
					<constructor-arg index="1" value="9300"/>
				</bean-->
		 	</list>
		</property>
	</bean>
	
	<bean id="connectionFactory" class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
	    <constructor-arg value="10.0.0.140" />
		<property name="username" value="guest" />
	    <property name="password" value="guest"/>
	</bean>
	
	<rabbit:template id="amqpTemplate" connection-factory="connectionFactory"/>

	<rabbit:admin connection-factory="connectionFactory"/>
	
	<rabbit:queue name="cccdApp" durable="true"/>
	<rabbit:queue name="cccdNewDocument" durable="true"/>	
	
	<bean id="baseCtrl" class="de.fhg.fokus.ngni.cccd.rest.BaseCtrl">
	   	<property name="mongoDb" ref="mongoDb"/>
	   	<property name="esClient" ref="esClient"/>
	   	<property name="debugResponse" ref="debugResponse"/>
	   	<property name="customUserDetailsService" ref="customUserDetailsService"/>
	   	<property name="amqpTemplate" ref="amqpTemplate"/>
	</bean>

</beans>
